Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ
з лабораторної роботи 4 з дисципліни
"Програмування під Android"
на тему "Розроблення застосунку для ведення нотаток"








Виконав ст. гр ПЗПІ-23-8
Невмовенко Всеволод Олександрович
Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович








Харків 2024













МЕТА

Метою цієї лабораторної роботи є розробка мобільного додатку для платформи Android, який дозволяє користувачам створювати, редагувати, переглядати та видаляти нотатки. Додаток  
повинен підтримувати функції пошуку та фільтрації нотаток за рівнем важливості, а також забезпечувати можливість додавання зображень до нотаток. Крім того, додаток повинен бути локалізований для підтримки української та англійської мов.


ЗАВДАННЯ

Розробити додаток для ведення нотаток з можливістю створення, редагування, перегляду та видалення нотаток.

Кожна нотатка повинна містити заголовок, опис, рівень важливості, дату та час створення, а також зображення.

Реалізувати функції пошуку та фільтрації нотаток за текстом та рівнем важливості.

Забезпечити локалізацію інтерфейсу додатка для української та англійської мов.


ХІД РОБОТИ

MainActivity.java
Цей клас є основним екраном додатка, де відображається список нотаток. Використовується RecyclerView для відображення нотаток у вигляді карток. Реалізовано функції пошуку нотаток за текстом через SearchView та фільтрації за рівнем важливості через Spinner. Кнопка FloatingActionButton дозволяє користувачам додавати нові нотатки.

NotesTakerActivity.java
Цей клас відповідає за створення та редагування нотаток. Користувач може вводити заголовок, опис, вибирати рівень важливості та додавати зображення з галереї. Після збереження нотатки дані зберігаються в базі даних, і користувач повертається на головний екран.

NotesListAdapter.java
Адаптер для RecyclerView, який відображає список нотаток. Кожна нотатка відображається у вигляді картки з заголовком, описом, датою, зображенням та іконкою рівня важливості. Реалізовано обробку кліків та довгих натискань для редагування та видалення нотаток.

RoomDB.java
Цей клас реалізує базу даних за допомогою Room. Він містить методи для зберігання, оновлення, видалення та отримання нотаток. База даних зберігає інформацію про заголовок, опис, рівень важливості, дату та зображення нотаток.

MainDAO.java
Інтерфейс DAO (Data Access Object) для роботи з базою даних. Він містить методи для вставки, оновлення, видалення та отримання нотаток. Клас забезпечує взаємодію між додатком та базою даних.

FirstFragment.java та SecondFragment.java
Ці класи є фрагментами, які використовуються для навігації між екранами додатка. Вони містять простий інтерфейс з кнопками для переходу між фрагментами.

NotesClickListener.java
Інтерфейс для обробки кліків та довгих натискань на нотатки. Він використовується в MainActivity та NotesListAdapter для реалізації функціоналу редагування та видалення нотаток.

XML-макети
activity_main.xml: Головний екран додатка з пошуком, фільтрацією та списком нотаток.

activity_notes_taker.xml: Екран для створення та редагування нотаток з полями для введення заголовка, опису, вибору рівня важливості та додавання зображення.

notes_list.xml: Макет для відображення однієї нотатки у списку, включаючи заголовок, опис, дату, зображення та іконку рівня важливості.

fragment_first.xml та fragment_second.xml: Макети для фрагментів, які використовуються для навігації між екранами.

content_main.xml: Макет для основного контенту, який містить NavHostFragment для навігації між фрагментами.

menu_main.xml: Головне меню додатка.

popup_menu.xml: Контекстне меню для нотаток.

Ресурси
ic_launcher_background.xml: Фон для іконки додатка.

ic_launcher_foreground.xml: Передній план для іконки додатка.

ic_plus_icon.xml: Іконка для кнопки додавання нотатки.

ic_save.xml: Іконка для кнопки збереження нотатки.

ic_search.png: Іконка для пошуку.

pin_icon.png: Іконка для позначення закріпленої нотатки.

ВИСНОВКИ
Під час виконання лабораторної роботи було розроблено додаток для ведення нотаток, який дозволяє користувачам створювати, редагувати, переглядати та видаляти нотатки. Додаток підтримує функції пошуку та фільтрації нотаток, а також додавання зображень. Інтерфейс додатка локалізований для української та англійської мов. Використання Room для роботи з базою даних забезпечило зручне та ефективне зберігання даних.




























Додаток А: MainActivity.java

package com.example.notes;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Spinner;
import android.widget.Toast;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.PopupMenu;
import androidx.appcompat.widget.SearchView;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import androidx.recyclerview.widget.StaggeredGridLayoutManager;
import com.example.notes.Adapter.NotesListAdapter;
import com.example.notes.DataBase.RoomDB;
import com.example.notes.Models.Notes;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.util.ArrayList;
import java.util.List;


public class MainActivity extends AppCompatActivity implements PopupMenu.OnMenuItemClickListener{
    RecyclerView recyclerView;
    FloatingActionButton fab_add;
    NotesListAdapter notesListAdapter;
    RoomDB database;
    List<Notes> notes = new ArrayList<>();
    SearchView searchView_home;
    Notes selectedNote;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        recyclerView = findViewById(R.id.recycler_home);
        fab_add = findViewById(R.id.fab_add);
        searchView_home = findViewById(R.id.searchView_home);
        Spinner spinner_priority_filter = findViewById(R.id.spinner_priority_filter);
        database = RoomDB.getInstance(this);

        notesListAdapter = new NotesListAdapter(this, new ArrayList<>(), notesClickListener);
        recyclerView.setLayoutManager(new StaggeredGridLayoutManager(2, LinearLayoutManager.VERTICAL));
        recyclerView.setAdapter(notesListAdapter);

        loadNotes();

        fab_add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(MainActivity.this, NotesTakerActivity.class);
                startActivityForResult(intent, 101);
            }
        });

        searchView_home.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                filter(newText);
                return true;
            }
        });
        spinner_priority_filter.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String selectedPriority = parent.getItemAtPosition(position).toString();
                filterByPriority(selectedPriority);
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                updateRecycler(notes);
            }
        });

    }

    private void loadNotes() {
        notes.clear();
        notes.addAll(database.mainDao().getAll());
        notesListAdapter.notifyDataSetChanged();
        Log.d("MainActivity", "Loaded notes. Total notes: " + notes.size());
    }

    private void filterByPriority(String priority) {
        List<Notes> filteredList = new ArrayList<>();
        for (Notes singleNote : notes) {
            if (singleNote.getPriority().equals(priority) || priority.equals("All")) {
                filteredList.add(singleNote);
            }
        }
        notesListAdapter.filterList(filteredList);
    }

    private void filter(String newText) {
        List<Notes> filteredList = new ArrayList<>();
        for (Notes singleNote : notes) {
            if (singleNote.getTitle().toLowerCase().contains(newText.toLowerCase())
                    || singleNote.getNotes().toLowerCase().contains(newText.toLowerCase())) {
                filteredList.add(singleNote);
            }
        }
        notesListAdapter.filterList(filteredList);
    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == Activity.RESULT_OK && data != null) {
            Notes note = (Notes) data.getSerializableExtra("note");
            Log.d("MainActivity", "Received note from NotesTakerActivity: " + note.getTitle());

            if (requestCode == 101) {
                database.mainDao().insert(note);
                notes.add(note);
                notesListAdapter.notifyItemInserted(notes.size() - 1);
                Log.d("MainActivity", "Note added: " + note.getTitle() + note.getImageUrl() + note.getPriority());
                loadNotes();
            } else if (requestCode == 102) {
                database.mainDao().update(note.getID(), note.getTitle(), note.getNotes(), note.getImageUrl(), note.getPriority());
                int index = notes.indexOf(selectedNote);
                if (index != -1) {
                    notes.set(index, note);
                    notesListAdapter.notifyItemChanged(index);
                    Log.d("MainActivity", "Note updated: " + note.getTitle() + note.getImageUrl() + note.getPriority());
                }
                loadNotes();
            }
        }

    }
    private void updateRecycler(List<Notes> notes) {
        recyclerView.setHasFixedSize(true);
        recyclerView.setLayoutManager(new StaggeredGridLayoutManager(2, LinearLayoutManager.VERTICAL));
        notesListAdapter = new NotesListAdapter(MainActivity.this, notes, notesClickListener);
        recyclerView.setAdapter(notesListAdapter);
    }
    private final NotesClickListener notesClickListener = new NotesClickListener() {
        @Override
        public void onClick(Notes notes) {
            Intent intent = new Intent(MainActivity.this, NotesTakerActivity.class);
            intent.putExtra("old_notes", notes);
            startActivityForResult(intent, 102);

        }

        @Override
        public void onLongClick(Notes notes, CardView cardView) {
            selectedNote = notes;
            showPopUp (cardView);

        }
    };
    private void showPopUp(CardView cardView) {
        PopupMenu popupMenu = new PopupMenu(this, cardView);
        popupMenu.setOnMenuItemClickListener(this);
        popupMenu.inflate(R.menu.popup_menu);
        popupMenu.show();

    }
    @Override
    public boolean onMenuItemClick(MenuItem item) {
        if (item.getItemId()==R.id.pin) {
            if (selectedNote.isPinned()) {
                database.mainDao().pin(selectedNote.getID(), false);
                Toast.makeText(MainActivity.this, "Unpinned", Toast.LENGTH_SHORT).show();
            } else {
                database.mainDao().pin(selectedNote.getID(), true);
                Toast.makeText(MainActivity.this, "Pinned", Toast.LENGTH_SHORT).show();
            }
            notes.clear();
            notes.addAll(database.mainDao().getAll());
            notesListAdapter.notifyDataSetChanged();
            return true;
        }
        if (item.getItemId() == R.id.delete) {
            database.mainDao().delete(selectedNote);
            int index = notes.indexOf(selectedNote);
            if (index != -1) {
                notes.remove(index);
                notesListAdapter.notifyItemRemoved(index);
                Toast.makeText(MainActivity.this, "Note deleted", Toast.LENGTH_SHORT).show();
            }
            return true;
        }
        if (item.getItemId() == R.id.change) {
            if (selectedNote != null) {
                notesClickListener.onClick(selectedNote);
            } else {
                Toast.makeText(MainActivity.this, "No note selected", Toast.LENGTH_SHORT).show();
            }
            return true;
        }
        return false;
    }
}









Додаток Б: NotesTakerActivity.java

package com.example.notes;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.Toast;
import com.bumptech.glide.Glide;
import com.example.notes.Models.Notes;
import java.text.SimpleDateFormat;
import java.util.Date;

public class NotesTakerActivity extends AppCompatActivity {
    EditText editText_title, editText_notes;
    ImageView imageView_save, imageView_selected;
    Notes notes;
    private static final int REQUEST_CODE_PERMISSIONS = 1001;
    boolean isOldNote = false;
    private static final int PICK_IMAGE = 1;
    String imageUrl = "";

    String image_url = "";


    private void requestPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_MEDIA_IMAGES}, REQUEST_CODE_PERMISSIONS);
            }
        } else {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_CODE_PERMISSIONS);
            }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_notes_taker);
        Log.d("NotesTakerActivity", "Activity created.");
        imageView_save = findViewById(R.id.imageView_save);
        editText_notes = findViewById(R.id.editText_notes);
        editText_title = findViewById(R.id.editText_title);
        imageView_selected = findViewById(R.id.imageView_selected);
        Button button_select_image = findViewById(R.id.button_select_image);
        Spinner spinner_priority = findViewById(R.id.spinner_priority);

        notes = new Notes();
        try {
            notes = (Notes) getIntent().getSerializableExtra("old_notes");
            editText_title.setText(notes.getTitle());
            editText_notes.setText(notes.getNotes());
            spinner_priority.setSelection(getPriorityIndex(notes.getPriority()));
            imageUrl = notes.getImageUrl();
            if (!imageUrl.isEmpty()) {
                imageView_selected.setVisibility(View.VISIBLE);
                Glide.with(this).load(imageUrl).into(imageView_selected);
                button_select_image.setVisibility(View.GONE);
            }
            isOldNote = true;
            Log.d("NotesTakerActivity", "Loaded existing note: " + notes.getTitle());
        } catch (Exception e){
            e.printStackTrace();
            Log.e("NotesTakerActivity", "Error loading note: " + e.getMessage());
        }

        button_select_image.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                requestPermissions();
                Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                startActivityForResult(intent, PICK_IMAGE);
            }
        });

        imageView_save.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String title = editText_title.getText().toString();
                String description = editText_notes.getText().toString();
                String priority = spinner_priority.getSelectedItem().toString();
                String imageSelected = image_url;
                if(description.isEmpty()) {
                    Toast.makeText(NotesTakerActivity.this, "Please, enter description", Toast.LENGTH_SHORT).show();
                    return;
                }
                SimpleDateFormat formatter = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss");
                Date date = new Date();

                if (!isOldNote) {
                    notes = new Notes();
                }

                notes.setTitle(title);
                notes.setNotes(description);
                notes.setDate(formatter.format(date));
                notes.setPriority(priority);
                notes.setImageUrl(imageSelected);
                Log.d("NotesTakerActivity", "Saving note: " + notes.getTitle() + " with image URL: " + imageSelected);

                Intent intent = new Intent();
                intent.putExtra("note", notes);
                setResult(Activity.RESULT_OK, intent);
                finish();
            }
        });

    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == PICK_IMAGE && resultCode == RESULT_OK && data != null) {
            Uri selectedImageUri = data.getData();
            if (selectedImageUri != null) {
                try {
                    image_url = selectedImageUri.toString(); // Сохраняем URI
                    imageView_selected.setVisibility(View.VISIBLE);
                    Glide.with(this).load(selectedImageUri).into(imageView_selected);
                    Log.d("NotesTakerActivity", "Image loaded successfully");
                } catch (Exception e) {
                    Toast.makeText(this, "Failed to load image", Toast.LENGTH_SHORT).show();
                    Log.e("NotesTakerActivity", "Error loading image: " + e.getMessage());
                }
            } else {
                Toast.makeText(this, "Failed to get image", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private int getPriorityIndex(String priority) {
        switch (priority) {
            case "High":
                return 0;
            case "Medium":
                return 1;
            case "Low":
                return 2;
            default:
                return 0;
        }
    }
}




Додаток В: NotesListAdapter.java

package com.example.notes.Adapter;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;
import com.bumptech.glide.Glide;
import com.example.notes.Models.Notes;
import com.example.notes.NotesClickListener;
import com.example.notes.R;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class NotesListAdapter extends RecyclerView.Adapter <NotesViewHolder>{
    Context context;
    List<Notes> list;
    NotesClickListener listener;
    public NotesListAdapter(Context context, List<Notes> list, NotesClickListener listener) {
        this.context = context;
        this.list = list;
        this.listener = listener;
        Log.d("NotesListAdapter", "Adapter initialized with " + this.list.size() + " notes.");
    }
    @NonNull
    @Override
    public NotesViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        return new NotesViewHolder(LayoutInflater.from(context).inflate(R.layout.notes_list, parent, false));
    }
    @Override
    public void onBindViewHolder(@NonNull NotesViewHolder holder, int position) {
        holder.textView_title.setText(list.get(position).getTitle());
        holder.textView_title.setSelected(true);
        holder.textView_notes.setText(list.get(position).getNotes());
        holder.textView_date.setText(list.get(position).getDate());
        holder.textView_date.setSelected(true);
        String imageUrl = list.get(position).getImageUrl();
        Log.d("NotesListAdapter", "Binding note at position " + position + " with image URL: " + imageUrl);
        if (!imageUrl.isEmpty()) {
            Glide.with(context)
                    .load(imageUrl)
                    .into(holder.imageView_note);
            holder.imageView_note.setVisibility(View.VISIBLE);
        } else {
            holder.imageView_note.setVisibility(View.GONE);
        }
        if(list.get(position).isPinned()){
            holder.imageView_pin.setImageResource(R.drawable.pin_icon);
        } else{
            holder.imageView_pin.setImageResource(0);
        }

        String priority = list.get(position).getPriority();
        int colorCode;
        switch (priority) {
            case "High":
                colorCode = R.color.color1;
                break;
            case "Medium":
                colorCode = R.color.color2;
                break;
            case "Low":
                colorCode = R.color.color3;
                break;
            default:
                colorCode = R.color.white;
                break;
        }
        holder.notes_container.setCardBackgroundColor(holder.itemView.getResources().getColor(colorCode, null));
        Log.d("NotesListAdapter", "Set background color for note at position " + position + " to " + colorCode);
        holder.notes_container.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                listener.onClick(list.get(holder.getAdapterPosition()));
            }
        });
        holder.notes_container.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {
                listener.onLongClick(list.get(holder.getAdapterPosition()), holder.notes_container);
                return true;
            }
        });

    }

    private int getRandomColor(){
        List<Integer> colorCode = new ArrayList<>();
        colorCode.add(R.color.color1);
        colorCode.add(R.color.color2);
        colorCode.add(R.color.color3);

        Random random = new Random();
        int randomColor = random.nextInt(colorCode.size());
        return colorCode.get(randomColor);
    }

    @Override
    public int getItemCount() {
        return list.size();
    }

    public void filterList (List<Notes> filteredList) {
        list = filteredList;
        notifyDataSetChanged();
        Log.d("NotesListAdapter", "Filtered list updated. New size: " + list.size());
    }
}

class NotesViewHolder extends RecyclerView.ViewHolder {

    CardView notes_container;
    TextView textView_title;
    TextView textView_notes;
    TextView textView_date;
    ImageView imageView_pin;
    ImageView imageView_note;


    public NotesViewHolder(@NonNull View itemView) {
        super(itemView);

        notes_container = itemView.findViewById(R.id.notes_container);
        textView_title = itemView.findViewById(R.id.textView_title);
        textView_notes = itemView.findViewById(R.id.textView_notes);
        textView_date = itemView.findViewById(R.id.textView_date);
        imageView_pin = itemView.findViewById(R.id.imageView_pin);
        imageView_note = itemView.findViewById(R.id.imageView_note);
    }
}




Додаток Г: RoomDB.java

package com.example.notes.DataBase;

import android.content.Context;
import androidx.room.Database;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import com.example.notes.Models.Notes;

@Database(entities = Notes.class, version = 2, exportSchema = false)
public abstract class RoomDB extends RoomDatabase {

    private static RoomDB database;
    private static String DATABASE_NAME = "NotesApp";

    public synchronized static RoomDB getInstance(Context context){
        if(database == null) {
            database = Room.databaseBuilder(context.getApplicationContext(), RoomDB.class, DATABASE_NAME)
                    .allowMainThreadQueries()
                    .fallbackToDestructiveMigration()
                    .build();
        }
        return database;
    }
    public abstract mainDAO mainDao();
}


Додаток Д: MainDAO.java

package com.example.notes.DataBase;

import androidx.room.Dao;
import androidx.room.Delete;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;

import com.example.notes.Models.Notes;

import java.util.List;

@Dao
public interface mainDAO {

    @Insert (onConflict = OnConflictStrategy.REPLACE)
    void insert (Notes notes);

    @Query("SELECT * FROM notes ORDER BY id DESC")
    List<Notes> getAll();

    @Query("UPDATE notes SET title = :title, notes = :notes, priority = :priority, imageUrl = :imageUrl where ID = :id")
    void update (int id, String title, String notes, String priority, String imageUrl);

    @Delete
    void delete (Notes notes);

    @Query("UPDATE notes SET pinned = :pin WHERE ID = :id")
    void pin(int id, boolean pin);
}


Додаток Е: FirstFragment.java

package com.example.notes;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.navigation.fragment.NavHostFragment;

import com.example.notes.databinding.FragmentFirstBinding;

public class FirstFragment extends Fragment {

    private FragmentFirstBinding binding;

    @Override
    public View onCreateView(
            LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState
    ) {

        binding = FragmentFirstBinding.inflate(inflater, container, false);
        return binding.getRoot();

    }

    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        binding.buttonFirst.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                NavHostFragment.findNavController(FirstFragment.this)
                        .navigate(R.id.action_FirstFragment_to_SecondFragment);
            }
        });
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

}

Додаток Є: SecondFragment.java

package com.example.notes;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.navigation.fragment.NavHostFragment;

import com.example.notes.databinding.FragmentSecondBinding;

public class SecondFragment extends Fragment {

    private FragmentSecondBinding binding;

    @Override
    public View onCreateView(
            LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState
    ) {

        binding = FragmentSecondBinding.inflate(inflater, container, false);
        return binding.getRoot();

    }

    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        binding.buttonSecond.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                NavHostFragment.findNavController(SecondFragment.this)
                        .navigate(R.id.action_SecondFragment_to_FirstFragment);
            }
        });
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }

}


Додаток Ж: NotesClickListener.java

package com.example.notes;

import androidx.cardview.widget.CardView;
import com.example.notes.Models.Notes;

public interface NotesClickListener {
    void onClick (Notes notes);
    void onLongClick (Notes notes, CardView cardView);
}




